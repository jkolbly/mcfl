program = { SOI ~ (function | mcfunction)+ ~ EOI }

function = { "function" ~ name ~ parameter_declaration_list ~ ("->" ~ var_type)? ~ block }
mcfunction = { "mcfunction" ~ name ~ block }

name = @{ (ASCII_ALPHA | "_")+ ~ (ASCII_ALPHANUMERIC | "_")* }

parameter_declaration_list = { "(" ~ (parameter_declaration ~ ("," ~ parameter_declaration)*)? ~ ")" }
parameter_declaration = { var_type ~ name }

variable_declaration = { var_scope? ~ var_type ~ name }

var_scope = { global_scope }
global_scope = { "global" }

var_type = { int_type }
int_type = { "int" }

block = { "{" ~ statement* ~ "}" }

statement = _{ (assignment | variable_declaration | return_statement) ~ ";" }

return_statement = { return_keyword ~ expression }
return_keyword = _{ "return" }

assignment = { assignable ~ assignment_operator ~ expression }
assignable = _{ variable_declaration | name }
assignment_operator = _{ equals_operator }
equals_operator = _{ "=" }

binary_operation = { binary_operand ~ (binary_operator ~ binary_operand)* }
binary_operand = _{ parenthetical_expression | name | number_literal }
binary_operator = _{ add | subtract | multiply | divide | modulo }
add = { "+" }
subtract = { "+" }
multiply = { "*" }
divide = { "/" }
modulo = { "%" }

function_call = { name ~ argument_list }
argument_list = _{ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }

expression = _{ function_call | binary_operation | parenthetical_expression }
parenthetical_expression = _{ "(" ~ expression ~ ")" }

number_literal = ${ "-"? ~ ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* }